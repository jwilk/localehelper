#!/usr/bin/perl

# Copyright © 2012 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

=head1 NAME

localehelper - generate locales and set locale categories

=head1 SYNOPSIS

B<localehelper> [-x I<locale>[,I<locale>...]] [I<intvar>=I<locale>[,I<locale-fallback>...]]... [--] I<commandline>

=head1 SEE ALSO

=over

=item *
L<POSIX:2004|http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap08.html#tag_08_02>

=item *
L<GNU gettext manual|http://www.gnu.org/software/gettext/manual/html_node/The-LANGUAGE-variable.html>

=back

=cut

use strict;
use warnings;

use v5.10;

use File::Temp qw();

my $myself = 'localehelper';

my $category_re = qr/(?:LC_[A-Z]+|LANG|LANGUAGE)/;
my $locale_with_encoding_re = qr/^([^.@]+)[.]([^.@]+)((?:@.+)?)$/;

sub clean_environment($)
{
    my ($regex) = @_;
    my @keys_to_unset = grep { m/$regex/ } keys %ENV;
    delete @ENV{@keys_to_unset};
}

sub update_environment(%)
{
    my %env = @_;
    @ENV{keys(%env)} = values(%env);
}

sub normalize_encoding($)
{
    local ($_) = @_;
    y/A-Z/a-z/;
    s/[-_]//g;
    return $_;
}

sub normalize_locale($)
{
    local ($_) = @_;
    if (my ($prefix, $encoding, $suffix) = m/$locale_with_encoding_re/) {
        $encoding = normalize_encoding($encoding);
        return "$prefix.$encoding$suffix";
    }
    return $_;
}

sub show_usage()
{
    open(my $fh, '<', $0) or die;
    my $in_synopsis = 0;
    foreach (<$fh>) {
        chomp;
        when (m/^=head1\s+SYNOPSIS$/) {
            $in_synopsis = 1;
        }
        when (m/^=/) {
            last if $in_synopsis;
        }
        when (m/^(\S.*)/) {
            if ($in_synopsis) {
                s/B<(.*?)>/$1/g;
                s/I(<.*?>)/$1/g;
                say STDERR "Usage: $_";
                return;
            }
        }
    }
    die; # should not happen
}

my @extra_locales = ();
my %env = ();
while (scalar(@ARGV) > 0) {
    given ($ARGV[0]) {
        when (m/^($category_re)=(.*)$/) {
            my ($category, $locale) = ($1, $2);
            $env{$category} = $locale;
            shift @ARGV;
        }
        when ('-x') {
            shift @ARGV;
            if (not @ARGV) {
                say STDERR "$myself: error: -x requires an argument";
                exit 1;
            }
            push @extra_locales, split(',', shift @ARGV);
        }
        when (m/^(-h|--help)/) {
            show_usage();
            exit 1;
        }
        when ('--') {
            shift @ARGV;
            last;
        }
        default {
            last;
        }
    }
}

if (not @ARGV) {
    exit 0;
}

clean_environment(qr/^$category_re$/);

delete $ENV{LOCPATH};

my %all_locales = map { normalize_locale($_) => 1 } split(/\n/, `locale -a`);
my $no_missing_locales = 1;
my %locales_to_generate = ();
while (my ($category, $locales) = each %env) {
    next if $category eq 'LANGUAGE';
    local $" = ',';
    my @nlocales = map { normalize_locale($_) } split(',', $locales);
    $locales_to_generate{"@nlocales"} = 1;
    $no_missing_locales &&= grep { exists $all_locales{$_} } @nlocales;
}
for my $locale (@extra_locales) {
    $locale = normalize_locale($locale);
    $locales_to_generate{$locale} = 1;
    $no_missing_locales &&= exists $all_locales{$locale};
}

unless ($no_missing_locales) {
    %all_locales = ();
    my %encodings = ();
    for (glob '/usr/share/i18n/charmaps/*') {
        s{.*/}{};
        s/\.gz$//;
        my $encoding = $_;
        my $nencoding = normalize_encoding($_);
        $encodings{$nencoding} = $encoding;
    }
    my $locpath = $ENV{LOCPATH} = File::Temp::tempdir("$myself.XXXXXXXX", CLEANUP => 1, TMPDIR => 1);
    for my $locale (qw(C POSIX)) {
        delete $locales_to_generate{$locale};
        $all_locales{$locale} = 1;
    }
    for my $locales (keys %locales_to_generate) {
        my @locales = split(',', $locales);
        for my $locale (@locales) {
            if (my ($prefix, $encoding, $suffix) = $locale =~ m/$locale_with_encoding_re/) {
                $encoding = $encodings{$encoding} // $encoding;
                $locale = "$prefix.$encoding$suffix";
                next if -d "/usr/lib/locale/$locale/";
                system('localedef', '-f', $encoding, '-i', "$prefix$suffix", "$locpath/$locale/");
                if ($?) {
                    say STDERR "$myself: warning: localedef for $locale failed";
                    next;
                }
                $all_locales{normalize_locale($locale)} = 1;
                last;
            } else {
                say STDERR "$myself: warning: cannot generate locale $locale";
            }
        }
    }
}

while (my ($category, $locales) = each %env) {
    next if $category eq 'LANGUAGE';
    my @all_locales = split(',', $locales);
    my @existing_locales = grep { exists $all_locales{normalize_locale($_)} } @all_locales;
    if (@existing_locales) {
        $env{$category} = $existing_locales[0];
    } else {
        local $" = ', ';
        say STDERR "$myself: error: missing locales @all_locales";
        exit 1;
    }
}

update_environment(%env);

system { $ARGV[0] } @ARGV;

exit $?;

# vim:ts=4 sw=4 et
